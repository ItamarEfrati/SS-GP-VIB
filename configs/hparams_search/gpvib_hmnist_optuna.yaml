# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train_old.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val_auroc"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: hmnist

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 20

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: ${seed}
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.optimizer.lr: interval(0.00001, 0.01)
      model.beta: interval(0.0005, 0.005)

      model.encoder.cnn1d_out_channels: range(32, 512, step=32)
      model.encoder.z_dim: range(2, 82, step=10)
      model.encoder.kernel_size: range(3, 5, step=1)
      n_encoder_layers: range(1, 3, step=1)

      n_decoder_layers: range(1, 3, step=1)

      model.sigma: range(1.0, 15, step=1)
      model.length_scale: range(1, 22, step=3)
      model.num_samples: range(2, 14, step=4)

#      model.kernel: choice(cauchy, rbf)
#      model.kernel_scales: range(1, 5, step=1)

    custom_search_space: utils.optuna_hooks.hmnist_layers

n_encoder_layers: 1
n_decoder_layers: 1
time_length: ${model.time_length}
is_ensemble: ${model.is_ensemble}