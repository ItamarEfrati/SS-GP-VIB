# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train_old.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: ${metrics.optimize}

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: phsionet_2012

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 120

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 42
      n_startup_trials: 60 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      datamodule.batch_size: choice(64, 128, 256)
      model.optimizer.lr: range(0.00001, 0.01, 0.00001)
      model.beta: range(0.0001, 0.01, 0.00001)
      model.alpha: range(0.5, 1.5, 0.01)
      model.optimizer.weight_decay: range(0.0001, 0.05, 0.00001)

#      callbacks.warmup_start.warmup_steps: choice(0, 10, 100)
      model.timeseries_encoder.ts_embedding_size: choice(8, 16, 32, 48, 64)
      model.timeseries_encoder.nhead: choice(1, 2, 4, 8)
      model.timeseries_encoder.dim_feedforward: choice(64, 128, 256, 512)
      model.timeseries_encoder.attention_dropout: range(0.0, 0.4, 0.05)
      model.timeseries_encoder.encoding_size: choice(2, 4, 8, 12, 16)

      +n_encoder_layers: choice(1, 2)
      +n_decoder_layers: choice(0, 1, 2)

      model.sigma: range(1, 15, step=1)
      model.num_samples: choice(1, 4, 8, 16, 32)

    custom_search_space: utils.optuna_hooks.physionet_2012_gpvib_e_attention_d_flatten

is_ensemble: ${model.is_ensemble}